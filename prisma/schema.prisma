// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  accounts      Account[]
  sessions      Session[]
  profile       Profile?
  posts         Post[]
  comments      Comment[]
  likes         Like[]
  followingTeams TeamFollow[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Profile {
  id            String    @id @default(cuid())
  bio           String?   @db.Text
  location      String?
  joinedDate    DateTime  @default(now())
  coverImage    String?
  
  userId        String    @unique
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Team {
  id            String    @id @default(cuid())
  name          String    @unique
  shortName     String?
  logo          String?
  league        String
  country       String
  stadium       String?
  founded       Int?
  description   String?   @db.Text
  
  homeMatches   Match[]   @relation("HomeTeam")
  awayMatches   Match[]   @relation("AwayTeam")
  followers     TeamFollow[]
}

model TeamFollow {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  teamId        String
  team          Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  
  @@unique([userId, teamId])
}

model Match {
  id            String    @id @default(cuid())
  date          DateTime
  competition   String
  venue         String
  status        MatchStatus @default(SCHEDULED)
  
  homeTeamId    String
  homeTeam      Team      @relation("HomeTeam", fields: [homeTeamId], references: [id])
  homeScore     Int?
  
  awayTeamId    String
  awayTeam      Team      @relation("AwayTeam", fields: [awayTeamId], references: [id])
  awayScore     Int?
  
  posts         Post[]
}

enum MatchStatus {
  SCHEDULED
  LIVE
  COMPLETED
  POSTPONED
  CANCELLED
}

model Post {
  id            String    @id @default(cuid())
  title         String
  content       String    @db.Text
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  authorId      String
  author        User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  matchId       String?
  match         Match?    @relation(fields: [matchId], references: [id])
  
  comments      Comment[]
  likes         Like[]
}

model Comment {
  id            String    @id @default(cuid())
  content       String    @db.Text
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  authorId      String
  author        User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  postId        String
  post          Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Like {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  postId        String
  post          Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  @@unique([userId, postId])
}
